{"name":"Candybean","tagline":"","body":"Candybean\r\n=========\r\nCandybean is SugarCRM's next generation automation and testing framework.  It is a collection of components that fosters test automation, execution configuration, data abstraction, results illustration, tag-based execution, top-down and bottom-up batches, mobile variants, plain-language testing, and web service testing.\r\n\r\n[Javadoc API Documentation](http://sugarcrm.github.io/candybean/doc/index.html)\r\n\r\nFeatures\r\n--------\r\nSome project features planned for Candybean:\r\n* HTML 5 support (Sugar 7): supports HTML 5 elements\r\n* Support Java-based tests/calls: executes Java-based test scripts\r\n* Abstraction from dependent technologies:\r\n** Supports multiple, independent reporting options (e.g. XML, HTML)\r\n** Supports multiple automation frameworks (de-prioritized)\r\n** Data-driven resource agnostic (e.g. DB, XML, JSON)\r\n* Independent from project-specific parameters:\r\n** Supports product objectification, thus platform-independent\r\n** Product independent (no Sugar-specific references)\r\n* Self-testing:\r\n** Verify element hooks are valid before running tests\r\n** Verify abstract element behavior (fields, menus, etc.)\r\n** Unit and system tested\r\n* Script-style logging: make debugging readable, easier\r\n* Failure/error non-blocking: option to continue executing tests upon error/failure\r\n* Resource consolidating: pre-execution resource scan for consolidated allocation\r\n* Supports 'smart' waits (WIP definition)\r\n* Configurable with ease/overridable via CLI\r\n* Randomized testing: Supports randomized/stress testing\r\n* Open-source:\r\n** JavaDoc/API with usage details, examples, best practices\r\n** Externally-facing site/wiki with installation documentation\r\n** Code samples\r\n* Best practice, OOP-organized code for ease of maintenance\r\n* Easy to install (GUI installer or minimal configuration)\r\n\r\nComponents\r\n----------\r\nThis is a list of components that collectively fall under Candybean:\r\n* Automation: contains functionality that automates application interaction\r\n* Configuration: an extension of the native Java Properties object with configuration-file-specific functionality\r\n* Data Source: an abstracted data source object with iterative and key-value behavior\r\n* Results: an encapsulation of test result parsing and illustrative/presentation functionality\r\n* Runner: an annotation-based orchestration object that executes identified code portions\r\n* Test: a utilities package with test-specific helper functionality\r\n* Translations: outputs given files with translated strings; can be used for i18n, etc.\r\n* Utilities: contains generic helper functionality\r\n* Web Services: contains REST request-building and response-parsing functionality\r\n* Mobile: a cross platform mobile testing framework\r\n\r\nInstallation\r\n------------\r\nInstall and configure the following dependencies:\r\n* <a href=\"http://git-scm.com/downloads\">Git (clone your fork)</a>\r\n* <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">Java SE 7 JDK</a>\r\n* <a href=\"http://maven.apache.org/download.html\">Maven 3</a>\r\n* <a href=\"https://www.google.com/intl/en/chrome/browser/\">Chrome (default browser)</a>\r\n\r\nConfiguration\r\n-------------\r\nThe following key-value keys should be defined in a configuration file used to instantiate Candybean\r\n```\r\nautomation.interface = chrome # chrome | firefox | ie | opera | android | ios  \r\nbrowser.firefox_binary = {\\\r\n\t\"linux\": \"/path/to/firefox/binary/in/linux\", \\\r\n\t\"mac\": \"/path/to/firefox/binary/on/mac\", \\\r\n\t\"windows\": \"c:/path/to/firefox/binary/in/windows\"}\r\nbrowser.firefox_profile = default\r\nbrowser.chrome_driver_path = {\\\r\n\t\"linux\": \"/path/to/chrome/driver/in/linux\", \\\r\n\t\"mac\": \"/path/to/chrome/driver/on/mac\", \\\r\n\t\"windows\": \"/path/to/chrome/driver/in/windows\"}\r\nbrowser.chrome_driver_log_path = /path/to/chromedriver/log\r\nbrowser.ie_driver_path = /path/to/ie/driver\r\nperf.page_load_timeout = /page/load/in/seconds\r\nperf.implicit_wait_seconds = /passive/wait/in/seconds\r\n```\r\n\r\nWriting tests\r\n------------\r\nHere's an example Java-JUnit test that instantiates Candybean and begins testing through a Chrome browser:\r\n```\r\nimport com.sugarcrm.candybean;\r\n\r\npublic class CandybeanTest {\r\n\r\n\tstatic Candybean cb;\r\n\t\r\n\t@BeforeClass\r\n\tpublic static void first() throws Exception {\r\n\t\tConfiguration candybeanConfig = new Configuration(new File(\"path/to/candybean.config\"));\r\n\t\tcb = Candybean.getInstance(candybeanConfig);\r\n\t\tcb.getInterface().start(Type.CHROME);\r\n\t}\r\n\t\r\n\t@Test\r\n\tpublic void backwardForwardRefreshTest() throws Exception {\r\n\t\tcb.log(\"Bringing up craigslist.com for an apartment search!\");\r\n\t\tcb.getInterface().go(\"http://www.craigslist.com/\");\r\n\t\tassertEquals(\"http://www.craigslist.com/\", cb.getURL());\r\n\t\t... do other things\r\n\t\t... perform other assertions\r\n\t\t... perform other logging\r\n\t\t... use other candybean features\t\t\r\n\t}\r\n\t\r\n\t@AfterClass\r\n\tpublic static void last() throws Exception {\r\n\t\tcb.getInterface().stop();\r\n\t}\r\n}\r\n```\r\n\r\nExecuting tests\r\n--------------\r\nAt this point, because Candybean is Maven-based, executing simple maven commands will detect written tests and execute them for test results:\r\n```\r\n> mvn clean install\r\n```\r\nYou can also see the included system tests to see test examples.  System tests can be executing via maven and the 'system' profile:\r\n```\r\n> mvn clean install -Psystem\r\n```\r\n\r\nCore contributors\r\n-----------------\r\n* Conrad Warmbold (<a href=\"https://github.com/cradbold\">@cradbold</a>)\r\n* Soon Han (<a href=\"https://github.com/hans-sugarcrm\">@hans-sugarcrm</a>)\r\n* Larry Cao (<a href=\"https://github.com/sqwerl\">@sqwerl</a>)\r\n* Jason Lin (<a href=\"https://github.com/Raydians\">@Raydians</a>)\r\n* Wilson Li (<a href=\"https://github.com/wli-sugarcrm\">@wli-sugarcrm</a>)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}